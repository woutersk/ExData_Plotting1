github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
repos <- content(req)
dim(repos)
repos
count(repos)
nrow(repos)
repos[1]
head(repos)
repos$url
repos[1]
fromJSON(toJSON(repos))
library(json)
library(jsonlite)
fromJSON(toJSON(repos))
jrepos <- fromJSON(toJSON(repos))
head(jrepos)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(RMySQL)
sqldf("select pwgtp1 from acs where AGEP < 50")
install.packages("sqldf")
libary(sqldf)
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf(acs,"select pwgtp1 from acs where AGEP < 50")
ls()
libary(sqldf)
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
detach("package:RSQLite", unload=TRUE)
library("RSQLite", lib.loc="C:/Program Files/R/R-3.1.2/library")
library(sqldf)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
q3 <-unique(acs$AGEP)
r3 <-sqldf("select distinct AGEP from acs")
if (q3==r3)
q3
q3 - r3
library(httr)
html2 = GET("http://biostat.jhsph.edu/~jleek/contact.html")
content2 = content(html2, as="text")
head(content2)
dim(content2)
content2[1]
library(XML)
doc <- xmlTreeParse("http://biostat.jhsph.edu/~jleek/contact.html",useInternal=TRUE)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
close(con)
htmlCode
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
read.fwf
read.fwf()
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",(16,4,9,4,9,4,9,4,4))
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(16,4,9,4,9,4,9,4,4))
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(15,4,9,4,9,4,9,4,4))
nooa <-read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(15,4,9,4,9,4,9,4,4))
nooa[,4]
head(nooa)
nooa
nooa[,4]
head(nooa)
c4 <- nooa[5:,4]
length(nooa)
length(nooa[1])
length(nooa[,1])
c4 <- nooa[5:1258,4]
head(c4)
sum(c4)
as.numeric(c4)
nooa
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(14,4,9,4,9,4,9,4,4))
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(14,4,9,4,9,4,9,4,4))
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(15,4,9,4,9,4,9,4,4))
head(nooa)
nooa[5,4]
50 - nooa[5,4]
50 - as.numeric(nooa[5,4])
as.numeric(25.4)
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(15,4,9,4,9,4,9,4,4),skip=4)
length(nooa[,1])
head(nooa)
nooa <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(15,4,9,4,9,4,9,4,4),skip=4)
head(nooa)
length(nooa[,1])
nooa[,4]
sum(nooa[,4])
load("H:/kees/cursus/data_science_specialization/3.Getting and Cleaning Data/assignments/.RData")
com2
com2[,1:4]
class(com2)
unclass(com2)
com2[,1:4]
com2[,2]
as.numeric(com2[,2])
gdp[,1:4]
gdp[,2]
x<-factor(c("a","a","b","b","a"))
x
x<-factor(x[1],levels=c("b","a"))
x
x<-factor(x,levels=c("b","a"))
x<-factor(c("a","a","b","b","a"))
x
x<-factor(x,levels=c("b","a"))
x
com2[,1:4]
com2[,2]
as.numeric(levels(com2[,2]))[com2[,2]]
com3 <- cbind(as.numeric(levels(com2[,2]))[com2[,2]],com2)
com3[,1:5]
names(com3)
names(x)[1]
names(x)[2]
names(com3)[1]
names(com3)[1] <- "rankn"
names(com3)
library(plyr)
arrange(com3,rankn)
com3[,1:5]
unclass(com3[,1])
class(com3[,1])
arrange(com3,rankn)[,1:5]
com4 <-arrange(com3,desc(rankn))
com4[,1:5]
head(com4,n=10)
com4[,c(1:5,7)]
library(dplyr)
filter(com4,Income.group=="High income: OECD")
filter(com4,Income.Group=="High income: OECD")
mean(filter(com4,Income.Group=="High income: OECD")[,1])
mean(filter(com4,Income.Group=="High income: nonOECD")[,1])
com4[,c(1:5,7)]
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
?spread
submit()
play()
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
gather(stocks, stock, price, X:Z)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
nxt()
submit()
extract_numeric("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
passed
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
submit()
submit()
?group_by
submit()
quit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now)()
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 20, minutes = 18)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
quit()
setwd("H:/kees/cursus/data_science_specialization/4.Exploratory Data Analysis/assignments/project1/ExData_Plotting1")
source('H:/kees/cursus/data_science_specialization/4.Exploratory Data Analysis/assignments/project1/ExData_Plotting1/plot4.R')
edata <- plot4()
par(mtrow = c(2,2))
par(mfrow = c(2,2))
with(edata, plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)"))  # y-axis label
names(edata)
with(edata, plot(DateTime,                                   # x-axis
Voltage,                        # y-axis
type ="l",                                  # type is line graph
ylab = "Global Active Power (kilowatts)"))  # y-axis label
with(edata, plot(DateTime,                                   # x-axis
Voltage,                        # y-axis
type ="l",                                  # type is line graph
ylab = "Voltage"))  # y-axis label
with(edata, plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)"),  # y-axis label
plot(DateTime,                                   # x-axis
Voltage,                                    # y-axis
type ="l",                                  # type is line graph
ylab = "Voltage")),                         # y-axis label
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering"),              # y-axis label
lines(DateTime, Sub_metering_2, col = "red"),    # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue"))   # add sub_metering_3 in blue
with(edata, plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)"),  # y-axis label
plot(DateTime,                                   # x-axis
Voltage,                                    # y-axis
type ="l",                                  # type is line graph
ylab = "Voltage"),                          # y-axis label
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering"),              # y-axis label
lines(DateTime, Sub_metering_2, col = "red"),    # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue"))   # add sub_metering_3 in blue
par(mfrow = c(2,2))
with(edata, plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)"),  # y-axis label
plot(DateTime,                                   # x-axis
Voltage,                                    # y-axis
type ="l",                                  # type is line graph
ylab = "Voltage"),                          # y-axis label
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering"),              # y-axis label
lines(DateTime, Sub_metering_2, col = "red"),    # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue"))   # add sub_metering_3 in blue
par(mfrow = c(2,2))
with(edata, plot(DateTime,                                   # x-axis
+                  Global_active_power,                        # y-axis
+                  type ="l",                                  # type is line graph
+                  xlab = "",                                  # no x-axis label
+                  ylab = "Global Active Power (kilowatts)"),  # y-axis label
+      plot(DateTime,                                   # x-axis
+           Voltage,                                    # y-axis
+           type ="l",                                  # type is line graph
+           ylab = "Voltage"))
with(edata, plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)"),
plot(DateTime, Voltage, type ="l", ylab = "Voltage"))
par(mfrow = c(2,2))
with(edata, plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)"),
plot(DateTime, Voltage, type ="l", ylab = "Voltage"))
with(edata, }plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)"),
plot(DateTime, Voltage, type ="l", ylab = "Voltage")})
with(edata, {plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)"),
plot(DateTime, Voltage, type ="l", ylab = "Voltage")})
with(edata, {plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type ="l", ylab = "Voltage")})
with(edata, {plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type ="l", ylab = "Voltage")})
with(edata, {plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type ="l", ylab = "Voltage")})
with(edata, {
plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)")   # y-axis label
plot(DateTime,                                   # x-axis
Voltage,                                    # y-axis
type ="l",                                  # type is line graph
ylab = "Voltage")                           # y-axis label
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering")               # y-axis label
lines(DateTime, Sub_metering_2, col = "red")     # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue")    # add sub_metering_3 in blue
} )
with(edata, {plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)")
plot(DateTime, Voltage, type ="l", ylab = "Voltage")})
with(edata, {
plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)")   # y-axis label
plot(DateTime,                                   # x-axis
Voltage,                                    # y-axis
type ="l",                                  # type is line graph
ylab = "Voltage")                           # y-axis label
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering")               # y-axis label
lines(DateTime, Sub_metering_2, col = "red")     # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue")    # add sub_metering_3 in blue
} )
with(edata, plot(DateTime, Global_active_power, type ="l", xlab = "", ylab = "Global Active Power (kilowatts)"))
with(edata, {
plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)")   # y-axis label
plot(DateTime,                                   # x-axis
Voltage,                                    # y-axis
type ="l",                                  # type is line graph
ylab = "Voltage")                           # y-axis label
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering")               # y-axis label
lines(DateTime, Sub_metering_2, col = "red")     # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue")    # add sub_metering_3 in blue
plot(DateTime,                                   # x-axis
Global_reactive_power,                      # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Reactive Power (kilowatts)") # y-axis label
} )
with(edata, {
plot(DateTime,                                   # x-axis
Global_active_power,                        # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Global Active Power (kilowatts)")   # y-axis label
plot(DateTime,                                   # x-axis
Voltage,                                    # y-axis
type ="l",                                  # type is line graph
xlab = "datetime",                          # x-axis label
ylab = "Voltage")                           # y-axis label
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering")               # y-axis label
lines(DateTime, Sub_metering_2, col = "red")     # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue")    # add sub_metering_3 in blue
plot(DateTime,                                   # x-axis
Global_reactive_power,                      # y-axis
type ="l",                                  # type is line graph
xlab = "datetime",                          # x-axis label
ylab = "Global Reactive Power (kilowatts)") # y-axis label
} )
source('H:/kees/cursus/data_science_specialization/4.Exploratory Data Analysis/assignments/project1/ExData_Plotting1/plot4.R')
plot4()
plot4()
source('H:/kees/cursus/data_science_specialization/4.Exploratory Data Analysis/assignments/project1/ExData_Plotting1/plot4.R')
plot4()
source('H:/kees/cursus/data_science_specialization/4.Exploratory Data Analysis/assignments/project1/ExData_Plotting1/plot4.R')
plot4()
source('H:/kees/cursus/data_science_specialization/4.Exploratory Data Analysis/assignments/project1/ExData_Plotting1/plot4.R')
plot4()
?col
?color
?colors
?legend
plot(datetime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering")               # y-axis label
lines(datetime, Sub_metering_2, col = "red")     # add sub_metering_2 in red
lines(datetime, Sub_metering_3, col = "blue")    # add sub_metering_3 in blue
legend("topright",
box.col = "",
lty = 1,
col = c("black", "red", 'blue'),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
names(edata)
names(edata[,1])
plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering")               # y-axis label
lines(DateTime, Sub_metering_2, col = "red")     # add sub_metering_2 in red
lines(DateTime, Sub_metering_3, col = "blue")    # add sub_metering_3 in blue
legend("topright",
box.col = "",
lty = 1,
col = c("black", "red", 'blue'),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(edata$DateTime,                                   # x-axis
edata$Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering")               # y-axis label
lines(edata$DateTime, edata$Sub_metering_2, col = "red")     # add sub_metering_2 in red
lines(edata$DateTime, edata$Sub_metering_3, col = "blue")    # add sub_metering_3 in blue
legend("topright",
box.col = "",
lty = 1,
col = c("black", "red", 'blue'),
legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(edata$DateTime,                                   # x-axis
+      edata$Sub_metering_1,                             # y-axis
+      type ="l",                                  # type is line graph
+      xlab = "",                                  # no x-axis label
+      ylab = "Energy sub metering")               # y-axis label
png(file = "plot3.png")
with(edata, plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering"))              # y-axis label
with(edata, lines(DateTime, Sub_metering_2, col = "red"))    # add sub_metering_2 in red
with(edata, lines(DateTime, Sub_metering_3, col = "blue"))   # add sub_metering_3 in blue
with(edata, plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering"))              # y-axis label
dev.off()
with(edata, plot(DateTime,                                   # x-axis
Sub_metering_1,                             # y-axis
type ="l",                                  # type is line graph
xlab = "",                                  # no x-axis label
ylab = "Energy sub metering"))              # y-axis label
source('H:/kees/cursus/data_science_specialization/4.Exploratory Data Analysis/assignments/project1/ExData_Plotting1/plot4.R')
